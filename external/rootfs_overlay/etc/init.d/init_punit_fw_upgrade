#!/bin/sh
#//*****************************************************************************
#// This file is provided under a dual BSD/LGPLv2.1 license.  When using 
#// or redistributing this file, you may do so under either license.
#//
#// LGPL LICENSE SUMMARY
#//
#// Copyright(c) 2010-2014. Intel Corporation. All rights reserved.
#//
#// This program is free software; you can redistribute it and/or modify 
#// it under the terms of version 2.1 of the GNU Lesser General Public 
#// License as published by the Free Software Foundation.
#//
#// This library is distributed in the hope that it will be useful, but 
#// WITHOUT ANY WARRANTY; without even the implied warranty of 
#// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
#// Lesser General Public License for more details.
#//
#// You should have received a copy of the GNU Lesser General Public 
#// License along with this library; if not, write to the Free Software 
#// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 
#// USA. The full GNU Lesser General Public License is included in this 
#// distribution in the file called LICENSE.LGPL.
#//
#// Contact Information:
#//     Intel Corporation
#//     2200 Mission College Blvd.
#//     Santa Clara, CA  97052
#//
#// BSD LICENSE
#//
#// Copyright (c) 2010-2012. Intel Corporation. All rights reserved.
#//
#// Redistribution and use in source and binary forms, with or without 
#// modification, are permitted provided that the following conditions 
#// are met:
#//
#//   - Redistributions of source code must retain the above copyright 
#//     notice, this list of conditions and the following disclaimer.
#//   - Redistributions in binary form must reproduce the above copyright 
#//     notice, this list of conditions and the following disclaimer in 
#//     the documentation and/or other materials provided with the 
#//     distribution.
#//   - Neither the name of Intel Corporation nor the names of its 
#//     contributors may be used to endorse or promote products derived 
#//     from this software without specific prior written permission.
#//
#// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
#// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
#// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
#// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
#// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
#// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
#// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
#// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
#// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
#// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
#// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#//*****************************************************************************


# Script name can be the called name, or something more meaningful.
SCRIPTNAME=$0
MOD_NAME=punit_fw_upgrade_drv
PUNIT_DRAM_NEED_UPGRADE_FILE="/sys/module/$MOD_NAME/fw_info/punit_dram_need_upgrade"
PUNIT_DRAM_UPGRADE_FILE="/sys/module/$MOD_NAME/fw_info/punit_dram_upgrade"

#this is to control if we could upgrade the MFH entry from file system.
#by default it's enabled. It could be customized by disabling the upgrade
PUNIT_FW_UPGRADE_SWITCH=1

PATH=/usr/local/bin:/usr/bin:/bin:/sbin
. /etc/init.d/init_utilities

start_function() {
    # Get the name of the SOC that is running
    SOC_NAME=`get_soc_info_utility NAME STRING 2>/dev/null`
 
    # Setup the symbol links for the driver binaries according to the SOC.
    case $SOC_NAME in
        "SOC_NAME_CE2600" )
            FW_NAME="/lib/firmware/punit/ce2600_8051_firmware.bin"
            ;;
        "SOC_NAME_CE5300" )
            FW_NAME="/lib/firmware/punit/gen5_pm8051_c0.bin"
            ;;
        * )
            echo "[punit_fw_upgrade]Unsupported SOC Type $SOC_NAME... "
            exit 0
    esac;

    if [ ! -f "$FW_NAME" ]; then
        echo "[punit_fw_upgrade] firmware \"$FW_NAME\" doesn't exist"
        exit 0
    fi
    try_command insmod /lib/modules/$MOD_NAME.ko fw_name=$FW_NAME 2>/dev/null 

    if [ -x /usr/sbin/atom_swdl_utility ];then
        /usr/sbin/atom_swdl_utility --ready > /dev/null 2>&1
        if [ "$?" == "0" ];then
            export PUNIT_FW_UPGRADE_SWITCH=0
            echo "This is a CEFDK failsafe upgrade ready platform."
            echo "Standalone punit in field upgrade is not supported."
            exit 0
        fi
    fi
    
    if [ "$PUNIT_FW_UPGRADE_SWITCH" == "0" ];then
        echo "punit fw in field upgrade is disabled."
        exit 0
    fi    

    
    #for CE2600, firmware upgrade to punit will be done in init_punit_fw_upgrade_notification init script
    #for other platforms, it will be upgraded here
    PUNIT_DRAM_NEED_UPGRADE=`cat $PUNIT_DRAM_NEED_UPGRADE_FILE`
    if [ "$PUNIT_DRAM_NEED_UPGRADE" == "1" ];then 
        if [ "$SOC_NAME" != "SOC_NAME_CE2600" ];then
            try_command echo "update" > $PUNIT_DRAM_UPGRADE_FILE
            echo "0" > $PUNIT_DRAM_NEED_UPGRADE_FILE
        fi
    fi

    #burn the punit firmware to flash mfh entry via idts tool
    FW_NEED_UPGRADE=`cat /sys/module/$MOD_NAME/fw_info/flash_need_upgrade`
    if [ "$FW_NEED_UPGRADE" == "1" -a -x /usr/dtsbin/flash ];then
        if [ ! -z "`cat /proc/boardinfo|grep EMMC_BOOT`" ];then    
            echo "[punit_fw_upgrade]upgrade the Punit firmware to emmc flash"
            /usr/dtsbin/flash mfhdeactivate -type emmc -mfh 8051_fw -id 0    > /dev/null
            /usr/dtsbin/flash mfhadd -type emmc -mfh 8051_fw -id 0 -file $FW_NAME > /dev/null
            /usr/dtsbin/flash mfhactivate -type emmc -mfh 8051_fw -id 0 > /dev/null
        fi    
        if [ ! -z "`cat /proc/boardinfo|grep SPI_NOR_BOOT`" ];then    
            echo "[punit_fw_upgrade]upgrade the Punit firmware to spi nor flash"
            /usr/dtsbin/flash mfhdeactivate -type spinor -mfh 8051_fw -id 0 > /dev/null
            /usr/dtsbin/flash mfhadd -type spinor -mfh 8051_fw -id 0 -file $FW_NAME > /dev/null
            /usr/dtsbin/flash mfhactivate -type spinor -mfh 8051_fw -id 0 > /dev/null
        fi
        echo "0"> /sys/module/$MOD_NAME/fw_info/flash_need_upgrade
    fi
}

stop_function() {
    #the following will load the iosf driver in all platforms
    if [ ! -z "`lsmod|grep punit_fw_upgrade_drv`" ]; then
           rmmod punit_fw_upgrade_drv
    fi
}

case $1 in
    "start")
        start_function
        ;;
    "stop")
        stop_function
        ;;
    "restart")
        stop_function
        start_function
        ;;
    *)
        echo "Usage: $0 {start|stop|restart}"
esac
