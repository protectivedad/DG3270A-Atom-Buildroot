// NOTE: This layout starts at the media_base_address specified in platform config
// Entries starting with smd_buffers* and smd_frame_buffers are processed by the SMD core, 
// the name really doesn't matter other than the beginning, except that each entry must have a unique name.


//name { type = <type> pmr = <pmr_identifier> size = <size> page_size = <page_size> align = <alignment> access = <accessible_value>}

// { access = <accessible_value>}
// If accessible_value equals to 1, it means this memory region is not restricted and it can be mmapped/accessed by all host processes.
// If accessible_value equals to 0 or no access defined, it means this memory region is restricted and it can't be mmapped/accessed by any host processes.


//----------------------------------
//Buffers needed to install drivers/FW (~89MB)
smd_fw_ADSPFW0               {                     size = 0x00200000 align = 0x100000} // (2MB  ) Audio DSP Firmware and Debug 
smd_fw_ADSPFW1               {                     size = 0x00200000 align = 0x100000} // (2MB  ) Audio DSP Firmware and Debug
smd_fw_VPPFW                 {                     size = 0x00020000                 } // (128KB) VidPProc Firmware
smd_fw_TSDFW                 {                     size = 0x00010000 align = 0x10000 } // ( 64KB) 1x64KB Demux Firmware
smd_fw_MFD_PFW               {                     size = 0x00040000 align = 0x40000 } // (256KB) for loading Parser  FW
smd_fw_MFD_DFW_MP4_NORMAL    {                     size = 0x00004000                 } // ( 16KB) for loading FW MP4 normal 
smd_fw_MFD_DFW_MP4_DP        {                     size = 0x00004000                 } // ( 16KB) for loading FW MP4 DP 
smd_fw_MFD_BUFFER_MISC       {                     size = 0x00002000                 } // (  8KB) for Sync msg and global memory
smd_fw_MFD_SCR               {                     size = 0x00028000                 } // (160KB) for loading scratch mem for Decoder FW
omar_buf                     {                     size = 0x00100000 align = 0x100000 access = 1} // (1MB) OMAR trace buffer, must be aligned to size
sven_buf                     {                     size = 0x00100000 align = 0x100000 access = 1} // (1MB) SVEN trace buffer, must be aligned to size
sven_hdr                     {                     size = 0x00001000 access = 1      } // (4KB) sven header buffer
omar_hdr                     {                     size = 0x00001000 access = 1      } // (4KB) omar header buffer
smd_VPP_BLACK                {                     size = 0x001E0000 access = 1      } // (1.6MB) VidPProc Black Border
smd_MFD_DSH                  {                     size = 0x00a00000 access = 1      } // (10MB) for all Decoder stream handles due to VC1
display_hdmi_dma             {                     size = 0x00008000 access = 1      } // (32KB) HDMI DMA Descriptors
display                      {                     size = 0x04600000 access = 1      } // (70MB) Display Memory

//----------------------------------
//SMD Video Frame buffers (186.375MB)
//Each buffer region is 2*2272*2*stride bytes = 9,306,112 bytes if stride is 2k
// Frames per Region
//             1080i/p 720p 576i/p 480i/p
//NV12 buffers 2       4    10     10
//NV16 buffers 2       3     6      8
//The region height is a configurable option, specified in platform_config.hcfg
//
// core->frame_buffer_properties->region_height
//
// 
smd_frame_buffers            { type = "frames"     size = 0x0BA60000 access = 1      } // (186.375MB) used to allocate frame buffer regions, include normal, YUV and MH buffer


//----------------------------------
//SMD linear buffers (82MB)
//Enough for dual HD 3D playback
smd_buffers_linear           { type = "linear"     size = 0x05200000 access = 1      } // (82MB) all SMD linear buffer allocations


// TOP of layout ~= 358MB + the offset assigned with media_base_address

//------------------------------------------------------------------------------
//----  SEE COMMENT BELOW FOR ENTRIES BELOW THIS POINT
//------------------------------------------------------------------------------

// The entries above define static memory regions REQUIRED by the stack.
// Software components will query these regions using the pre-defined names in
// the above entries when the stack is initialized.
//
// Additional definitions can be added for regions of memory that can be made
// *dynamically* available (at runtime) to the display driver via the
// gdl_attach_heap() API; this memory then becomes available for graphics
// applications (see the documentation of the gdl_attach_heap() API for
// details).
//
// It is assumed that dynamic regions will overlap the static regions defined
// above for video playback, and that a controlling application will terminate
// all video playback to make the memory available before starting a
// graphics-intensive application that will call gdl_attach_heap().
//
// Add definitions below this point, using the same format as above; i.e.,
//
//    <heap_name> { size = <heap_size_in_bytes> }
//
// <size> must be multiples of the system page size.
//
// <heap_name> can be any unique arbitrary string.  It should be passed
// to gdl_attach_heap() at runtime.
