#!/bin/sh
####################################################################
## makeVAP
##
## This script is used to create AP or Station instances (VAPs).  It
## will NOT actually join the bridge or do any RF configuration.
##
## The form of the command is
##
## makeVAP <Mode> <ESSID> <Channel_String> <beaconint>
##
## Where
##     Mode:    Either ap, ap-wds, sta, or sta-wds
##              (access point or station)
##     ESSID:   ESSID String
##     Channel: String indicating the channel configuration.  This is in
##     String   the form inst:RF:channel:mode where
##              Inst = Interface instance (which radio, 0 or 1)
##              RF   = RF indicates radio should be configured with the specified parameters
##              channel = channel to put the AP on, use 11A or 11G to scan
##              mode = operating mode, one of
##              11AST         : 11 A Static Turbo (Legacy)
##              AUTO          : Legacy Scan Mode
##              11A           : Legacy 11A mode
##              11B
##              11G
##              FH
##              TA
##              TG
##              11NAHT20
##              11NGHT20
##              11NAHT40PLUS
##              11NAHT40MINUS
##              11NGHT40PLUS  
##              11NGHT40MINUS
##              11NAHT40 (valid only when channel=11na)
##              11NGHT40 (valid only when channel=11ng)
##
##
## beaconint:   This is the beacon interval desired for this VAP.  Note
##              that this is system wide, and will override the current
##              beacon interval for ALL vaps.  You MUST also include the
##              RF command for this option.
##
## Examples:
##   Access Point with RF
##      makeVAP ap OpenAP 0:RF:6:
##   Access Point with RF, beacon interval of 400 ms
##      makeVAP ap OpenAP RF 400
##   Access Point w/o RF
##      makeVAP ap NormAP
##   WDS Root AP
##      makeVAP ap-wds RootAP RF
##   WDS Repeater (two commands)
##      makeVAP sta-wds RPTR RF
##      makeVAP ap-wds RPTR
##
###################################################################

. /etc/ath/apcfg

if [ "${1}" = "" ]; then
    echo "makeVAP usage"
    echo "makeVAP mode essid IFstr"
    echo
    echo "mode: [ap | ap-wds | sta | sta-wds | sta-fwd]"
    echo "essid: up to 32 character ESSID string"
    echo "RF: Include RF commands"
    echo "beaconint: Beacon interval, milliseconds"
    echo
    exit
fi

MODE=`echo $1 | cut -f 1 -d '-'`
SUB_MODE=`echo $1 | cut -f 2 -d '-'`
IND_MODE=`echo $1 | cut -f 3 -d '-'`

IFNUM=`echo $3 | cut -f 1 -d ':'`
RF=`echo $3 | cut -f 2 -d ':'`
PRI_CH=`echo $3 | cut -f 3 -d ':'`
CH_MODE=`echo $3 | cut -f 4 -d ':'`

echo "1->$1 2->$2 3->$3 4->$4 5->$5"
CFGINDEX=`echo $5`
echo "CFGINDEX=${CFGINDEX}"
CREATE_VAP=$6
if [ "${IFNUM}" != "0" -a "${IFNUM}" != "1" ]; then
    IFNUM=0
fi

##
## Need to select the proper radio parameters based on the interface
## ID
##

if [ "${IFNUM}" = "1" ]; then
    # ARRIS REMOVE - R_SHORTGI=$SHORTGI_2
	R_CWMMODE=$CWMMODE_2
    R_AMPDUENABLE=$AMPDUENABLE_2
	R_AMPDUFRAMES=$AMPDUFRAMES_2
	R_AMPDULIMIT=$AMPDULIMIT_2
	R_TXCHAIN=$TX_CHAINMASK_2
    R_LEG_TXCHAIN=$TX_LEG_CHAINMASK_2
    R_LEG_RXCHAIN=$RX_LEG_CHAINMASK_2
	R_RXCHAIN=$RX_CHAINMASK_2
	R_SETCH144=$SETCH144_2
	GONLY=$PUREG_2
	NONLY=$PUREN_2
	ACONLY=${PUREAC_2:=0}
  DISCOEXT=$AP_DISCOEXT_2
  TXBURST=$AP_TXBURST_2
  BADECLINE=$AP_BADECLINE_2
  AMSDU=$AP_AMSDU_2
  HT40INTOL=$AP_HT40INTOL_2
  RXSTBC=$AP_RXSTBC_2
  TXSTBC=$AP_TXSTBC_2  
  TXBF=$AP_TXBF_2
  BLK_DFS=$AP_BLK_DFS_2
  BKSCAN=$AP_BKSCAN_2
  LMTOBSS=$AP_LMTOBSS_2
  # ARRIS ADD - start - DCS, MIN/MAXDWELL, RSSIVAR, CHLOADVAR, PWRSAVE, RATECTL, MANRATE, and MANRETRIES
  DCS=$AP_DCS_2
  MINDWELL=$ACS_MINDWELL_2
  MAXDWELL=$ACS_MAXDWELL_2
  RSSIVAR=$ACS_RSSIVAR_2
  CHLOADVAR=$ACS_CHLOADVAR_2
  PWRSAVE=$AP_PWRSAVE_2
  LED_CUSTOMER=$LED_CUSTOM_2
  R_RATECTL=$RATECTL_2
  R_MANRATE=$MANRATE_2
  R_MANRETRIES=$MANRETRIES_2
  # ARRIS ADD - end
else
    # ARRIS REMOVE - R_SHORTGI=$SHORTGI
	R_CWMMODE=$CWMMODE
    R_AMPDUENABLE=$AMPDUENABLE
	R_AMPDUFRAMES=$AMPDUFRAMES
	R_AMPDULIMIT=$AMPDULIMIT
	R_TXCHAIN=$TX_CHAINMASK
    R_LEG_TXCHAIN=$TX_LEG_CHAINMASK_2
    R_LEG_RXCHAIN=$RX_LEG_CHAINMASK_2
	R_RXCHAIN=$RX_CHAINMASK
	R_SETCH144=$SETCH144
	GONLY=$PUREG
	NONLY=$PUREN
	ACONLY=${PUREAC:=0}
  DISCOEXT=$AP_DISCOEXT
  TXBURST=$AP_TXBURST
  BADECLINE=$AP_BADECLINE
  AMSDU=$AP_AMSDU
  RXSTBC=$AP_RXSTBC
  TXSTBC=$AP_TXSTBC
  HT40INTOL=$AP_HT40INTOL
  TXBF=$AP_TXBF
  BLK_DFS=$AP_BLK_DFS
  BKSCAN=$AP_BKSCAN
  LMTOBSS=$AP_LMTOBSS
  # ARRIS ADD - start - DCS, MIN/MAXDWELL, RSSIVAR, CHLOADVAR, PWRSAVE, RATECTL, MANRATE and MANRETRIES
  DCS=$AP_DCS
  MINDWELL=$ACS_MINDWELL
  MAXDWELL=$ACS_MAXDWELL
  RSSIVAR=$ACS_RSSIVAR
  CHLOADVAR=$ACS_CHLOADVAR
  PWRSAVE=$AP_PWRSAVE
  LED_CUSTOMER=$LED_CUSTOM
  R_RATECTL=$RATECTL
  R_MANRATE=$MANRATE
  R_MANRETRIES=$MANRETRIES
  # ARRIS ADD - end
fi

ESSID=$2
BEACONINT=$4

##
## First, let's see if we have the modules loaded.  If not, call the
## rc.wlan script to load them
##

MODLIST=`lsmod | grep ath_hal`

if [ "${MODLIST}" = "" ]; then
    /etc/rc.d/rc.wlan up

    ##
	## Check for bad return value.  If so, exit
	##

	if [ $? != 0 ]; then
	    exit 255
	fi
else
    echo "Modules already loaded"
fi

if [ "$AP_ENABLE_TX99" = "y" ]; then
    echo "Ready for TX99"
    exit
fi

echo "Creating ${MODE} for ${ESSID} on ${BRIDGE}"

##
## Create the instance
##

#ARRIS ADD START 
#use configured BSSID value
if [ "${CFGINDEX}" = "0" ]; then
	VAP_BSSID="AP_BSSID"
	eval VAP_BSSID=\$$AP_BSSID
else
    IDX=`expr ${CFGINDEX} + 1`
    VAP_BSSID="AP_BSSID_${IDX}"
   	eval VAP_BSSID=\$$VAP_BSSID
fi
#ARRIS ADD END

if [ "${MODE}" = "sta" ]; then
    if [ "${IND_MODE}" = "ind" -o "${IND_MODE}" = "sin" -o "${SUB_MODE}" = "wds" ]; then
        APNAME=`wlanconfig ath create wlandev wifi$IFNUM wlanmode ${MODE}`
    elif [ "${SUB_MODE}" = "proxy" ]; then
        APNAME=`wlanconfig ath create wlandev wifi$IFNUM wlanmode ${MODE} wlanaddr 00:00:00:00:00:00 nosbeacon`
    else
        APNAME=`wlanconfig ath create wlandev wifi$IFNUM wlanmode ${MODE} nosbeacon`
    fi
    APMODE="mode managed"
    if [ "${R_LEG_TXCHAIN}" != "" -a "${R_LEG_TXCHAIN}" != "0" ]; then
    iwpriv wifi$IFNUM txchmaskleg $R_LEG_TXCHAIN
    fi
    if [ "${R_LEG_RXCHAIN}" != "" -a "${R_LEG_RXCHAIN}" != "0" ]; then
    iwpriv wifi$IFNUM rxchmaskleg $R_LEG_RXCHAIN
    fi

else
    if [ "${IFNUM}" = "0" ]; then
        BCNBURST=${BCNBURST_ENABLE}
    else
        BCNBURST=${BCNBURST_ENABLE_2}
    fi
    if [ "${BCNBURST}" = "1" ]; then
        iwpriv wifi$IFNUM set_bcnburst 1
    fi
    if [ "$CREATE_VAP" = "1" ]; then
        #ARRIS ADD - wlanaddr     
        APNAME=`wlanconfig ath${CFGINDEX} create wlandev wifi$IFNUM wlanmode ${MODE} wlanaddr "$VAP_BSSID"`
    else
        APNAME=ath${CFGINDEX}
        ifconfig $APNAME down
    fi 
    if [ "${MODE}" = "adhoc" ]; then
        APMODE="mode ad-hoc"
    else
        APMODE="mode master"
    fi
fi

echo Added ${APNAME} ${APMODE}

##
## Enable WDS if selected
##

if [ "${SUB_MODE}" = "wds" ]; then
    iwpriv ${APNAME} wds 1
fi

## AP_STARTMODE = extap
## This will come for the station vap of repeater
if [ "${SUB_MODE}" = "ext" ]; then
    iwpriv ${APNAME} extap 1
fi


##
## Enable VAP Independant mode - for repeater-ind conf
##

if [ "${IND_MODE}" = "ind" ]; then
    if [ $PRI_CH = 11na -o $PRI_CH = 11ng ]; then
        echo "Auto Channel selection is not allowed for VAP independant mode"
        exit 255
    else
        iwpriv ${APNAME} vap_ind 1
    fi
fi

## ACS is only for AP only or Ad-Hoc mode
if [ "${MODE}" = "sta" ]; then
    if [ $CH_MODE = 11NAHT40 -o $CH_MODE = 11NGHT40 ]; then
        echo "Auto Channel selection is not for sta mode"
        exit 255
    fi
fi

##
## Enable Station forwarding if selected
##

if [ "${SUB_MODE}" = "fwd" ]; then
    iwpriv ${APNAME} stafwd 1
fi

##
## Disable Background Scan
##

# ARRIS REMOVE - (no longer implemented) - iwpriv ${APNAME} bgscan 0

##
# set various debug modes
##

if [ "${DEBUGMODE}" = "" ]; then
    DEBUGMODE=0x100
fi

if [ "${HALDEBUG}" = "" ]; then
    HALDEBUG=0x0
fi

if [ "${ATHDEBUG}" = "" ]; then
    ATHDEBUG=0x0
fi

# ARRIS REMOVE - (no longer implemented) - iwpriv wifi$IFNUM HALDbg $HALDEBUG
# ARRIS MOD START - to avoid error prints on wifi0:
if [ "$IFNUM" == "1" ]; then 
    iwpriv wifi$IFNUM ATHDebug $ATHDEBUG
fi
# ARRIS MOD END
iwpriv ${APNAME} dbgLVL $DEBUGMODE

if [ "${R_SETCH144}" != ""  -a "${R_SETCH144}" != "0" ]; then
        iwpriv wifi$IFNUM setCH144 $R_SETCH144
fi

## WEATHER_RADAR_FILTER 

if [ "${AP_NO_WRADAR_CHAN}" = "1" ]; then
    iwpriv ${APNAME} no_wradar 1
else
    iwpriv ${APNAME} no_wradar 0
fi

##
## Operating Mode passed in through call.  Determine the frequeny, or if a 
## scan is required
##

if [ $PRI_CH = 11na -o $PRI_CH = 11ng ]; then
    FREQ="freq 0"
else
    # ARRIS MOD - START - Triggering ACS in makeVAP causes follow-up iwpriv's to time out. Trigger at end of apup
    if [ "$PRI_CH" == "0" ]; then
        if [ "${IFNUM}" = "0" ]; then
            PRI_CH=36
        else
            PRI_CH=1
        fi
    fi
    # ARRIS MOD - END
    FREQ="freq $PRI_CH"
fi

if [ "${AP_CHANBW}" != "" ]; then
    #
    # Channel bandwidth was specified
    #

    iwpriv ${APNAME} chanbw ${AP_CHANBW}
fi

if [ "${AP_CHANBW_2}" != "" ]; then
    #
    # Channel bandwidth was specified
    #

    iwpriv ${APNAME} chanbw ${AP_CHANBW_2}
fi

##
#####################################################################
## Check for RF command. If so, set the RF parameters, else do the
## simple cofiguration.
##

if [ "${RF}" = "RF" ]; then

    #
    # 11n configuration section
    # increase queue length
    #

    ifconfig ${APNAME} txqueuelen $TXQUEUELEN
    ifconfig wifi$IFNUM txqueuelen $TXQUEUELEN

    # ARRIS REMOVE - START (done per VAP)
    # # turn on halfgi
    # if [ "$R_SHORTGI" = "2" ]; then
    # 		R_SHORTGI=1
    # fi		
    # iwpriv ${APNAME} shortgi $R_SHORTGI
    # ARRIS REMOVE - END

    # ARRIS REMOVE - (no longer implemented) - iwpriv ${APNAME} noedgech $NO_EDGE_CH

    iwpriv ${APNAME} mode $CH_MODE

    #
    # Check to see if we are in one of the 11NG bands that require
    # ANI processing
    #

    # ARRIS REMOVE START - we dont compile with ATH_FORCE_BIAS so this command just errors
    # BAND=`echo $CH_MODE | grep 11NG`
    #
    # if [ "${BAND}" != "" ]; then
    #     iwpriv wifi$IFNUM ForBiasAuto 1
    # fi
    # ARRIS REMOVE END

    IS11G=`echo $CH_MODE | grep 11G`
    IS11NG=`echo $CH_MODE | grep 11NG`
	
    if [ "${IS11G}" != "" -o "${IS11NG}" != "" ]; then
        iwpriv ${APNAME} vap_doth 0
    fi
	
####################
####### TEMP WORKAROUND
####################

    PLUS=`echo $CH_MODE | grep PLUS`
    MINUS=`echo $CH_MODE | grep MINUS`

    if [ "${PLUS}" != "" ]; then
        iwpriv ${APNAME} extoffset 1
    fi
    if [ "${MINUS}" != "" ]; then
        iwpriv ${APNAME} extoffset -1
    fi

#######################

    #
    # Set Aggregation State
    #

    # ARRIS MODIFY START
    # stop "Operation not supported" errors since these iwpriv not working on wifi0 
    if [ ${IFNUM} = "1" ]; then
       iwpriv wifi$IFNUM AMPDU $R_AMPDUENABLE
       # set number of sub-frames in an ampdu
       iwpriv wifi$IFNUM AMPDUFrames $R_AMPDUFRAMES
       # set ampdu limit
       iwpriv wifi$IFNUM AMPDULim $R_AMPDULIMIT
    fi
    # ARRIS MODIFY END
    
    # 'g'-only mode (no 'b' stations)
    #iwpriv ${APNAME} pureg $PUREG
    if [ "${GONLY}" != "" ]; then # ARRIS ADD - to avoid printed errors
    iwpriv ${APNAME} pureg $GONLY
    fi # ARRIS ADD

    # 'n'-only mode (no legacy b/g/a stations)
    #iwpriv ${APNAME} puren $PUREN
    iwpriv ${APNAME} puren $NONLY

    iwpriv ${APNAME} pure11ac $ACONLY

    iwpriv ${APNAME} disablecoext $DISCOEXT
    # ARRIS ADD - START - disable automatic channel width management with co-existence. 
    if [ "${DISCOEXT}" == "1" ]; then
        iwpriv ${APNAME} cwmenable 0
    else
        iwpriv ${APNAME} cwmenable 1
    fi
    # ARRIS ADD - END
    iwpriv ${APNAME} ht40intol $HT40INTOL
    # protection mode  # ARRIS REMOVE for NOW - need to add back in new 10.2.4 CFG var 
    # iwpriv ${APNAME} protmode $PROTMODE
#    if [ "${IFNUM}"="1" ]; then
#   AC changed to radio 0 
    if [ "${IFNUM}"="0" ]; then 
        iwpriv ${APNAME} amsdu $AMSDU
        iwpriv ${APNAME} rx_stbc $RXSTBC
        iwpriv ${APNAME} tx_stbc $TXSTBC
    else
        iwpriv wifi$IFNUM AMSDU $AMSDU
        iwpriv wifi$IFNUM rxstbc $RXSTBC
        iwpriv wifi$IFNUM txstbc $TXSTBC
        if [ "${TXBF}"="0" ]; then
        		iwpriv wifi$IFNUM TxBF 0
        else		
        		iwpriv wifi$IFNUM TxBF 246
        fi		
    fi  
    if [ "${IFNUM}" == "1" ]; then  # ARRIS ADD
    iwpriv wifi$IFNUM decline_addba $BADECLINE
    fi                              # ARRIS ADD
    iwpriv wifi$IFNUM burst $TXBURST
    if [ "${BLK_DFS}" != "" ]; then # ARRIS ADD
    iwpriv ${APNAME} blockdfschan $BLK_DFS
    fi                              # ARRIS ADD
    iwpriv wifi$IFNUM acs_bkscanen $BKSCAN
    iwpriv wifi$IFNUM acs_lmtobss $LMTOBSS

    # ARRIS ADD - start - DCS, MIN/MAXDWELL, RSSIVAR, CHLOADVAR, ACS_DBGTRACE, and PWRSAVE
    if [ "_${DCS}" != "_" ]; then
        iwpriv wifi$IFNUM dcs_enable $DCS
    fi

    if [ "_${MINDWELL}" != "_" ]; then
        iwpriv ${APNAME} acsmindwell $MINDWELL
    fi

    if [ "_${MAXDWELL}" != "_" ]; then
        iwpriv ${APNAME} acsmaxdwell $MAXDWELL
    fi

    if [ "_${RSSIVAR}" != "_" ]; then
        iwpriv wifi$IFNUM acs_rssivar $RSSIVAR
    fi
        
    if [ "_${CHLOADVAR}" != "_" ]; then
        iwpriv wifi$IFNUM acs_chloadvar $CHLOADVAR
    fi

    if [ "_${ACS_DBGTRACE}" != "_" ]; then
        iwpriv wifi$IFNUM acs_dbgtrace $ACS_DBGTRACE
    fi

    if [ "_${PWRSAVE}" != "_" ]; then
        iwpriv ${APNAME} ant_ps_on $PWRSAVE
    fi

    if [ "_${LED_CUSTOMER}" != "_" ]; then
        iwpriv wifi$IFNUM set_led_custom $LED_CUSTOMER
    fi
    # ARRIS ADD - end

    # ARRIS REMOVE - START - Already covered below
    # #
    # # set SSID and frequency
    # #
    #
    # if [ "_${ESSID}" != "_any" ]; then
    #    iwconfig ${APNAME} essid "${ESSID}" ${APMODE} ${FREQ}
    # else
    #    iwconfig ${APNAME} ${APMODE} ${FREQ}
    # fi
    # ARRIS REMOVE - END

    #
    # set SSID and frequency
    #
    if [ "${MODE}" != "adhoc" -o "${AP_SECMODE}" != "WPA" ]; then
        if [ "_${ESSID}" != "_any" ]; then
            iwconfig ${APNAME} essid "${ESSID}" ${APMODE} ${FREQ}
        else
            iwconfig ${APNAME} ${APMODE} ${FREQ}
        fi
    fi

    #
    # IBSS setup channel
    # IBSS aggregation    
    #
    if [ "${MODE}" = "adhoc" ]; then
        iwconfig ${APNAME} channel ${PRI_CH}
        iwpriv ${APNAME} ampdu $AMPDUENABLE  
    fi

    #
    # If rate control is not auto, set the manual settings
    #
    # For current radio index, 11AC is radio 0, 11n is radio 1
    # ARRIS MOD - START - make radio generic:
    if [ "${R_RATECTL}" != "auto" ]; then
        case ${CH_MODE} in
            11N*)
                # Note: the RPC layer sets MANRATE formats appropriately for N/11AC
                iwpriv ${APNAME} set11NRates $R_MANRATE
                iwpriv ${APNAME} set11NRetries $R_MANRETRIES
                ;;
            11AC*)
                iwpriv ${APNAME} vhtmcs $R_MANRATE
                iwpriv ${APNAME} nss 1 # important to make things work
                ;;
        esac
    else
        iwpriv ${APNAME} set11NRates 0
        iwpriv ${APNAME} set11NRetries 0
        case ${CH_MODE} in
            11AC*)
                iwpriv ${APNAME} vhtmcs -1
                iwpriv ${APNAME} nss 3 # important to revert changes
                ;;
        esac
    fi
    # ARRIS MOD - END
    #
    # Set the chain masks
    #

    if [ "${R_TXCHAIN}" != "" -a "${R_TXCHAIN}" != "0" ]; then
        iwpriv wifi$IFNUM txchainmask $R_TXCHAIN
	fi

    if [ "${R_RXCHAIN}" != ""  -a "${R_RXCHAIN}" != "0" ]; then
        iwpriv wifi$IFNUM rxchainmask $R_RXCHAIN
    fi

    #
    # An extra IE is provided for Intel interop
    #

    # ARRIS REMOVE - (no longer implemented) - echo 1 > /proc/sys/dev/ath/htdupieenable

    #
    # This is where extra commands are executed.
    #

    if [ "${AP_EXTRA}" != "" ]; then
        echo $AP_EXTRA | grep ';'
        #There is at least one command that ends with ';'
        if [ "$?" -eq "0" ]; then
            _more_cmds=1
            while [ ${_more_cmds} -ne 0 ];
            do
                _cmd=`echo $AP_EXTRA | cut -f $_more_cmds -d ';'`
                if [ "${_cmd}" != "" ];
                then
                    $_cmd
                    _more_cmds=`expr $_more_cmds + 1`
                else
                    _more_cmds=0
                fi
                _cmd=""
            done
        else
            #probably user setting did not have a ';', cut command fails if
            #not set
            ${AP_EXTRA}
        fi
    fi

else
    ####
    # set SSID only
    ###

    iwpriv ${APNAME} mode ${CH_MODE}
    if [ "${MODE}" != "adhoc" -o "${AP_SECMODE}" != "WPA" ]; then
    iwconfig ${APNAME} essid "${ESSID}" ${APMODE} ${FREQ}
    fi

fi

##
## Check for multiple VAPs.  If the VAP name is ath2 we assume we want the
## beacon interval to be 400 ms
##

if [ "${BEACONINT}" != "" ]; then
    #
    # Beacon interval was specified
    #

    iwpriv ${APNAME} bintval ${BEACONINT}
fi
    
   ifconfig ${APNAME} allmulti

#VOW related configurations
if [ "${IFNUM}" = "0" ]; then
    if [ "${VOW_ENABLE}" = "1" ]; then
    #apply all commands if video enabled
    #All video options are enabled by default and no dynamic configuration
        iwpriv ${APNAME} mcastenhance 2
        iwpriv ${APNAME} acparams 1 0 1 0
        # ARRIS REMOVE - (no longer implemented) - iwpriv wifi0 setKeySrchAlways 1
        # ARRIS REMOVE - (no longer implemented) - iwpriv wifi0 setPhyRestartWar 1
    else
        # ARRIS REMOVE - (no longer implemented) - iwpriv wifi0 setVowExt 0
        # ARRIS REMOVE - (no longer implemented) - iwpriv wifi0 setKeySrchAlways 0
        iwpriv ${APNAME} mcastenhance 0
        iwpriv ${APNAME} acparams 1 0 0 0
        # ARRIS REMOVE - (no longer implemented) - iwpriv wifi0 set_vsp_enable 0
        # ARRIS REMOVE - (no longer implemented) - iwpriv wifi0 setPhyRestartWar 0
    fi

    # ARRIS REMOVE START - (no longer implemented)
    # if [ "${VOW_DEBUG}" = "1" ]; then
    #     iwpriv wifi0 setVowExtStats 1
    # else
    #     iwpriv wifi0 setVowExtStats 0
    # fi
    # ARRIS REMOVE END
fi

if [ "${IFNUM}" = "1" ]; then
    if [ "${VOW_ENABLE_2}" = "1" ]; then
    #apply all commands if video enabled
    #All video options are enabled by default and no dynamic configuration
        iwpriv ${APNAME} mcastenhance 2
        iwpriv ${APNAME} acparams 1 0 1 0
        # ARRIS REMOVE - (no longer implemented) - iwpriv wifi1 setKeySrchAlways 1
        # ARRIS REMOVE - (no longer implemented) - iwpriv wifi1 setPhyRestartWar 1
    else
        # ARRIS REMOVE - (no longer implemented) - iwpriv wifi1 setVowExt 0
        # ARRIS REMOVE - (no longer implemented) - iwpriv wifi1 setKeySrchAlways 0
        iwpriv ${APNAME} mcastenhance 0
        iwpriv ${APNAME} acparams 1 0 0 0
        # ARRIS REMOVE - (no longer implemented) - iwpriv wifi1 set_vsp_enable 0
        # ARRIS REMOVE - (no longer implemented) - iwpriv wifi1 setPhyRestartWar 0
    fi

    # ARRIS REMOVE START (no longer implemented)
    # if [ "${VOW_DEBUG_2}" = "1" ]; then
    #     iwpriv wifi1 setVowExtStats 1
    # else
    #     iwpriv wifi1 setVowExtStats 0
    # fi
    # ARRIS REMOVE END
fi

if [ "${CFGINDEX}" = "0" ]; then
if [ "${AP_HIDESSID}" = "1" ]; then
     iwpriv ${APNAME} hide_ssid 1
         echo "ath0 hide_ssid"
    else     
         iwpriv ${APNAME} hide_ssid 0
# ARRIS MOD START
         echo "ath0 hide_ssid 0"
# ARRIS MOD END
    fi
else
    IDX=`expr ${CFGINDEX} + 1`
    AP_VAP_HIDESSID="AP_HIDESSID_${IDX}"
    eval VAP_HIDESSID=\$$AP_VAP_HIDESSID
		echo "VAP_HIDESSID = ${VAP_HIDESSID}"
    if [ "${VAP_HIDESSID}" = "1" ]; then
         iwpriv ${APNAME} hide_ssid 1
         echo "ath${CFGINDEX} hide_ssid"
    else     
         iwpriv ${APNAME} hide_ssid 0
# ARRIS MOD START
         echo "${APNAME} hide_ssid 0"
# ARRIS MOD END
    fi
fi

if [ "${IEEE80211V_PROXYARP}" -eq "1" ]; then
    iwpriv ${APNAME} proxyarp 1
fi

## disable DCS for Repeater modes
if [ "${MODE}" = "sta" ]; then
    if [ "${SUB_MODE}" = "wds" -o "${SUB_MODE}" = "ext" ]; then
        iwpriv wifi$IFNUM dcs_enable 0
    fi   
fi
##
## If ICM is enabled, indicate to VAP that an
## external entity (icm) will take up initialization time
## ACS responsibility.
##
# ARRIS MODIFY - one line below 
# change -eq to = to prevent sh: bad number error when cfg variable is undefined
if [ "${ICM_ENABLE}" = "1" ]; then     #ARRIS MODIFY change -eq to =
    iwpriv ${APNAME} ext_ifu_acs 1
fi

##
## channel hopping is enabled in ACS module 
##
if [ "${ACS_CHANNEL_HOPPING}" -eq "1" ]; then
    iwpriv ${APNAME} ch_hop_en 1
fi

##
## Script Complete
##
VAPindex=${APNAME#ath}
if [ "${VAPindex}" != "" ]; then
          eval bintval="$"BEACON_INT_""$VAPindex""
        if [ "$bintval" != "" ]; then
          iwpriv $APNAME  bintval $bintval
        fi

        if [ "$BEACON_INT" != "" ]; then
          if [ "$VAPindex" = "0" ]; then
                bintval=$BEACON_INT
                iwpriv $APNAME  bintval $bintval
          fi
        fi
fi
## Supporte extending cfg command here
##
#
# Format: EXT_CFG_<n>="<CFG_CMD> <IWPRIV/IWCONFIG_CMD> <INTERFACE(RADIO/VAP)>"
#
#EXT_CFG_0="AP_TXPWR iwpriv tpscale RADIO"
#EXT_CFG_6="AP_BLKACK iwpriv AMPUD RADIO" #no need for each VAP
#EXT_CFG_0="AP_OPMODE iwpriv mode VAP"
EXT_CFG_1="AP_DTIM iwpriv dtim_period VAP"
EXT_CFG_2="AP_PROTMODE iwpriv protmode VAP"
EXT_CFG_3="AP_WMMAPSD iwpriv uapsd VAP"
EXT_CFG_4="AP_BLKACK_AC iwpriv ampdu VAP"
EXT_CFG_5="AP_WMMEN iwpriv wmm VAP"
EXT_CFG_6="AP_MACADDRCTLEN iwpriv maccmd VAP"
EXT_CFG_7="AP_ADDMACADDR iwpriv addmac VAP"
EXT_CFG_8="AP_DELMACADDR iwpriv delmac VAP"
EXT_CFG_9="AP_HT40INTOL iwpriv ht40intol VAP"
EXT_CFG_10="AP_EN11H iwpriv doth VAP"
EXT_CFG_11="AP_APBRI iwpriv ap_bridge VAP"
EXT_CFG_12="AP_INACT iwpriv inact VAP"
EXT_CFG_13="AP_FRAGTHRES iwconfig frag VAP"
EXT_CFG_14="AP_TXPREAMBLE iwpriv shpreamble VAP"
EXT_CFG_15="AP_RTSTHRES iwconfig rts VAP"
EXT_CFG_16="AP_MACLIST iwpriv addmac VAP"
EXT_CFG_17="AP_IGMP_SNOOP iwpriv mcastenhance VAP"
EXT_CFG_18="AP_MAX_STA iwpriv maxsta VAP"
EXT_CFG_19="AP_SHORTGI iwpriv shortgi VAP"
# ARRIS MOD - START - add AP_STATIONISOLATE
EXT_CFG_20="AP_STATIONISOLATE iwpriv l2tif VAP"
EXT_CFG_21="AP_STA_RSSI_THRESH iwpriv sta_rssi_thr VAP"
EXT_CFG_NUM=21
# ARRIS MOD - END

    for idx in $(seq 0 ${EXT_CFG_NUM}); do
        AP_EXTCFG="EXT_CFG_${idx}"
        eval AP_EXTCFG=\$${AP_EXTCFG}
        num=0
        CFG_VALUE=""
        CFG_UTILITY=""
        CFG_CMD=""
        CFG_INT=""
        CFG_WMM=""
        CFG_TMP=""
        for i in ${AP_EXTCFG}; do
            if [ "${num}" = "0" ]; then        
                CFG_VALUE=${i}
                CFG_TMP=${i}
            else if [ "${num}" = "1" ]; then
                CFG_UTILITY=${i}
            else if [ "${num}" = "2" ]; then
                CFG_CMD=${i}
            else if [ "${num}" = "3" ]; then
                CFG_INT=${i}
            fi
            fi
            fi
            fi
            num=`expr ${num} + 1`
        done
        #echo "EXT_CFG_${idx}: ${CFG_UTILITY} ${CFG_VALUE} ${CFG_CMD} ${CFG_INT}"
        if [ "${CFG_CMD}" = "" ]; then
            continue;
        fi
        if [ "${CFGINDEX}" = "0" ]; then
            eval V_CFG_VALUE=\$$CFG_VALUE
        else
            IDX=`expr ${CFGINDEX} + 1`
            VAP_CFG="${CFG_VALUE}_${IDX}"
            eval V_CFG_VALUE=\$$VAP_CFG
        fi
#       Let's do per RADIO settings separately          
#        if [ "${CFG_INT}" = "RADIO" ]; then
#            if [ "${CFGINDEX}" = "0" -o "${CFGINDEX}" = "1" ]; then
#                if [ "${V_CFG_VALUE}" != "" ]; then
#                    ${CFG_UTILITY} wifi$IFNUM ${CFG_CMD} ${V_CFG_VALUE}
#                    #echo "${CFG_UTILITY} wifi${IFNUM} ${CFG_CMD} ${V_CFG_VALUE}"
#                fi
#            fi
#        fi
        if [ "${CFG_INT}" = "VAP" ]; then
            if [ "${V_CFG_VALUE}" != "" ]; then
                if [ "${CFG_TMP}" == "AP_MACLIST" ]; then
                    # ARRIS ADD - START - skip empty maclists
                    if [ "${V_CFG_VALUE}" == '""' ]; then
                        continue;
                    fi
                    # ARRIS ADD - END
                    #echo "$V_CFG_VALUE"
                    # Format: xx:xx:xx:xx:xx:xx,name1;...xx:xx:xx:xx:xx:xx,nameX 
                    ACLLIST=${V_CFG_VALUE}
                    ACLLIST=`echo ${ACLLIST} | sed "s/,[^;]*;/ /g"`
                    # Handle item in the tail
                    ACLLIST=`echo $ACLLIST | sed "s/,.*//"`
                    #echo "$ACLLIST"
                    # Flush MACLIST
                    ${CFG_UTILITY} ath${CFGINDEX} maccmd 3
                    for aclIdx in ${ACLLIST}; do
                        ${CFG_UTILITY} ath${CFGINDEX} ${CFG_CMD} ${aclIdx}
                        #echo "${CFG_UTILITY} ath${CFGINDEX} ${CFG_CMD} ${aclIdx}"
                    done
                #ARRIS ADD - START - for AP_SHORTGI, translate 2-auto into 1-on
                elif [ "${CFG_TMP}" == "AP_SHORTGI" ]; then
                    if [ "${V_CFG_VALUE}" == "0" ]; then
                        ${CFG_UTILITY} ath${CFGINDEX} ${CFG_CMD} ${V_CFG_VALUE}
                    else
                        ${CFG_UTILITY} ath${CFGINDEX} ${CFG_CMD} 1
                    fi
                elif [ "${CFG_TMP}" == "AP_FRAGTHRES" ]; then # Not allowed in HT mode
                    case ${CH_MODE} in
                        11N*)  continue ;;
                        11AC*) continue ;;
                    esac
                    ${CFG_UTILITY} ath${CFGINDEX} ${CFG_CMD} ${V_CFG_VALUE}
                #ARRIS ADD - END
                else            
                    ${CFG_UTILITY} ath${CFGINDEX} ${CFG_CMD} ${V_CFG_VALUE}
                    #echo "${CFG_UTILITY} ath${CFGINDEX} ${CFG_CMD} ${V_CFG_VALUE}"
                fi    
            fi
        fi
    done
##
## Script Complete
##
echo Created ${APNAME} mode ${MODE} for "${ESSID}"
