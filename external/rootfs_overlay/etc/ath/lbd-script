#!/bin/sh
#
# @@-COPYRIGHT-START-@@
#
# Copyright (c) 2013,2014 Qualcomm Atheros, Inc.
# All Rights Reserved.
# Qualcomm Atheros Confidential and Proprietary.
#
# @@-COPYRIGHT-END-@@
#

START=55
SERVICE_WRITE_PID=1
SERVICE_DAEMONIZE=1
SERVICE_DEBUG_OUTPUT=0
SERVICE_PATH="/sbin/lbd"
LBD_CONFIG_FILE="/tmp/lbd.conf"
LBD_RUN_FILE="/var/run/.lbd"

echo "Executing lbd-script $1"
##. /lib/functions/whc-debug.sh
##. /lib/functions/whc-iface.sh

__lbd_cfg_append() {
	echo "$1" >> "$LBD_CONFIG_FILE"
}

__lbd_cfg_nl_append() {
	echo "" >> "$LBD_CONFIG_FILE"
	echo "$1" >> "$LBD_CONFIG_FILE"
}

# __lbd_cfg_add_str <option> <val>
__lbd_cfg_add_str() {
	local option="$1"
	local val="$2"
	echo option=$1 , val=$2
	__lbd_cfg_append "${option}=${val}"
}
__lbd_cfg_add_rssi_est_str() {
	local option="$1"
	local baseval="$2"
	local adjval="$3"
	local val="$2"
	if [ -n "${baseval}" ] && [ -n "${adjval}" ]; then
		if [ "${baseval}" -gt "${adjval}" ] && \
                   [ "${baseval}" -lt "$((255 + $adjval))" ]; then
			val="$(($baseval - $adjval))"
		elif [ "${baseval}" -le "${adjval}" ]; then
			val="0"
		elif [ "${baseval}" -ge "$((255 + $adjval))" ]; then
			val="255"
		fi
	fi
	[ -n "${val}" ] && __lbd_cfg_append "${option}=${val}"
}

__lbd_cfg_add_head() {
	echo ";"	> "$LBD_CONFIG_FILE"
	__lbd_cfg_append ';  Automatically generated lbd configure file,do not change it.'
	__lbd_cfg_append ';'
	__lbd_cfg_append ';INTERFACE		wlan interface'
	__lbd_cfg_append ';WLANIF2G		wlan driver interface for 2.4 GHz band'
	__lbd_cfg_append ';WLANIF5G		wlan driver interface for 5 GHz band'
	__lbd_cfg_append ';STADB:		station database'
	__lbd_cfg_append ';STAMON:		station monitor'
	__lbd_cfg_append ';BANDMON:		band monitor'
	__lbd_cfg_append ';ESTIMATOR:		rate estimator'
	__lbd_cfg_append ';STEEREXEC:		steering executor'
	__lbd_cfg_append ';STEERALG:		steering algorithm'
	__lbd_cfg_append ';DIAGLOG:		diagnostic logging'
}

__lbd_cfg_add_interface() {
	__lbd_cfg_append "WlanInterfaces=$IF_NAME"
}

__lbd_create_config() {
	__lbd_cfg_add_head
	__lbd_cfg_add_str	AgeLimit $BS_ADV_AGE_LIMIT
	__lbd_cfg_nl_append '[INTERFACE]'
	__lbd_cfg_add_interface

	__lbd_cfg_nl_append '[WLANIF2G]'
	__lbd_cfg_add_str	InactIdleThreshold $BS_IS_NORM_INACT_TIMEOUT
	__lbd_cfg_add_str	InactOverloadThreshold $BS_IS_OVERLOAD_INACT_TIMEOUT
	__lbd_cfg_add_str	InactCheckInterval $BS_IS_INACTCHECKINTERVAL
	__lbd_cfg_add_rssi_est_str InactRSSIXingHighThreshold $BS_IS_RSSI_STEERING_POINT_UG $BS_EST_RSSIDIFF_ESTW5FROMW2
	__lbd_cfg_add_str	LowRSSIXingThreshold $BS_SE_LOW_RSSIXING_THRESHOLD
	__lbd_cfg_add_str	MUCheckInterval $BS_BANDMON_MUCHECK_INTERVAL_W2
	__lbd_cfg_add_str	MUAvgPeriod $BS_OL_MU_AVG_PERIOD
	__lbd_cfg_add_str	BcnrptActiveDuration $BS_EST_BCNRPT_ACTIVE_DURATION
	__lbd_cfg_add_str	BcnrptPassiveDuration $BS_EST_BCNRPT_PASSIVE_DURATION
	__lbd_cfg_add_str	HighTxRateXingThreshold $BS_AS_TXRATEXING_THRESHOLD_UG
	__lbd_cfg_add_str	HighRateRSSIXingThreshold $BS_AS_RATERSSIXING_THRESHOLD_UG

	__lbd_cfg_nl_append '[WLANIF5G]'
	__lbd_cfg_add_str	InactIdleThreshold $BS_IS_NORM_INACT_TIMEOUT
	__lbd_cfg_add_str	InactOverloadThreshold $BS_IS_OVERLOAD_INACT_TIMEOUT
	__lbd_cfg_add_str	InactCheckInterval $BS_IS_INACTCHECKINTERVAL
	__lbd_cfg_add_str 	InactRSSIXingHighThreshold $BS_IS_RSSI_STEERING_POINT_UG
	__lbd_cfg_add_rssi_est_str	InactRSSIXingLowThreshold $BS_IS_RSSI_STEERPOINT_DG $BS_EST_RSSIDIFF_ESTW2FROMW5
	__lbd_cfg_add_str	LowRSSIXingThreshold $BS_SE_LOW_RSSIXING_THRESHOLD
	__lbd_cfg_add_str	MUCheckInterval $BS_BANDMON_MUCHECK_INTERVAL_W2
	__lbd_cfg_add_str	MUAvgPeriod $BS_OL_MU_AVG_PERIOD
	__lbd_cfg_add_str	BcnrptActiveDuration $BS_EST_BCNRPT_ACTIVE_DURATION
	__lbd_cfg_add_str	BcnrptPassiveDuration $BS_EST_BCNRPT_PASSIVE_DURATION
	__lbd_cfg_add_str	LowTxRateXingThreshold $BS_AS_LOWTXRATEXING_THRESHLD_DG
	__lbd_cfg_add_str	LowRateRSSIXingThreshold $BS_AS_RATERSSIXING_TH_DG

	__lbd_cfg_nl_append '[STADB]'
	__lbd_cfg_add_str	IncludeOutOfNetwork $BS_STADB_INCLUDEOUTOFNETWORK
	__lbd_cfg_add_str	AgingSizeThreshold $BS_STADBADV_AGINGSIZETHRESHOLD
	__lbd_cfg_add_str	AgingFrequency $BS_STADBADV_AGINGFREQUENCY
	__lbd_cfg_add_str	OutOfNetworkMaxAge $BS_STADBADV_OUTOFNETWORKMAXAGE
	__lbd_cfg_add_str	InNetworkMaxAge $BS_STADBADV_INNETWORKMAXAGE
	__lbd_cfg_add_str	ProbeMaxInterval $BS_ADV_AGE_LIMIT

	__lbd_cfg_nl_append '[STAMON]'
	__lbd_cfg_add_str	RSSIMeasureSamples_W2 $BS_STAMON_RSSIMEASURESAMPLES_W2
	__lbd_cfg_add_str	RSSIMeasureSamples_W5 $BS_STAMON_RSSIMEASURESAMPLES_W5
	__lbd_cfg_add_str	AgeLimit $BS_ADV_AGE_LIMIT
	__lbd_cfg_add_str	HighTxRateXingThreshold $BS_AS_TXRATEXING_THRESHOLD_UG
	__lbd_cfg_add_str	HighRateRSSIXingThreshold $BS_AS_RATERSSIXING_THRESHOLD_UG
	__lbd_cfg_add_str	LowTxRateXingThreshold $BS_AS_LOWTXRATEXING_THRESHLD_DG
	__lbd_cfg_add_str	LowRateRSSIXingThreshold $BS_AS_RATERSSIXING_TH_DG
	__lbd_cfg_nl_append '[BANDMON]'
	__lbd_cfg_add_str	MUOverloadThreshold_W2 $BS_OL_MU_OVERLOAD_THRESHOLD_W2
	__lbd_cfg_add_str	MUOverloadThreshold_W5 $BS_OL_MUS_OVRLD_THRESHOLD_W5
	__lbd_cfg_add_str	MUSafetyThreshold_W2 $BS_OL_MU_SAFETY_THRESHOLD_W2
	__lbd_cfg_add_str	MUSafetyThreshold_W5 $BS_OL_MU_SAFETY_THRESHOLD_W5
	__lbd_cfg_add_str	RSSISafetyThreshold $BS_OL_OFFLOADING_MIN_RSSI
	__lbd_cfg_add_str	RSSIMaxAge $BS_ADV_AGE_LIMIT
	__lbd_cfg_add_str	ProbeCountThreshold $BS_BANDMON_PROBECOUNTTHRESHOLD

	__lbd_cfg_nl_append '[ESTIMATOR]'
	__lbd_cfg_add_str	AgeLimit $BS_ADV_AGE_LIMIT
	__lbd_cfg_add_str	RSSIDiff_EstW5FromW2 $BS_EST_RSSIDIFF_ESTW5FROMW2
	__lbd_cfg_add_str	RSSIDiff_EstW2FromW5 $BS_EST_RSSIDIFF_ESTW2FROMW5
	__lbd_cfg_add_str	ProbeCountThreshold $BS_EST_PROBE_COUNT_THRESHOLD
	__lbd_cfg_add_str	StatsSampleInterval $BS_EST_STATS_SAMPLE_INTERVAL
	__lbd_cfg_add_str	11kProhibitTime $BS_EST_11KPROHIBIT_TIME
	__lbd_cfg_add_str	PhyRateScalingForAirtime $BS_EST_PHYRATESCALLING_AIRTIME
	__lbd_cfg_add_str	EnableContinuousThroughput $BS_EST_ENABLE_CONTINUOUS_TP
	__lbd_cfg_nl_append '[STEEREXEC]'
	__lbd_cfg_add_str	SteeringProhibitTime $BS_SE_STEERINGPROHIBITTIME
	__lbd_cfg_add_str	TSteering $BS_SE_TSTEERING
	__lbd_cfg_add_str	InitialAuthRejCoalesceTime $BS_SE_INITAUTHREJCOALESCETIME
	__lbd_cfg_add_str	AuthRejMax $BS_SE_AUTHREJMAX
	__lbd_cfg_add_str	SteeringUnfriendlyTime $BS_SE_STEERINGUNFRIENDLYTIME
	__lbd_cfg_add_str	MaxSteeringUnfriendly $BS_SE_MAX_STEER_UNFRIENDLY
	__lbd_cfg_add_str	LowRSSIXingThreshold_W2 $BS_SE_LOW_RSSIXING_THRESHOLD
	__lbd_cfg_add_str	LowRSSIXingThreshold_W5 $BS_SE_LOW_RSSIXING_THRESHOLD
	__lbd_cfg_add_str	TargetLowRSSIThreshold_W2 $BS_SE_TARGETLOWRSSITHRESHOLD_W2
	__lbd_cfg_add_str	TargetLowRSSIThreshold_W5 $BS_SE_TARGETLOWRSSITHRESHOLD_W5
	__lbd_cfg_add_str	BlacklistTime $BS_SE_BLACKLISTTIME
	__lbd_cfg_add_str	BTMResponseTime $BS_SE_BTM_RESPONSE_TIME
	__lbd_cfg_add_str	BTMAssociationTime $BS_SE_BTM_ASSOC_TIME
	__lbd_cfg_add_str	BTMAlsoBlacklist $BS_SE_BTM_BLACKLIST
	__lbd_cfg_add_str	BTMUnfriendlyTime $BS_SE_BTM_UNFRIENDLY_TIME
	__lbd_cfg_add_str	BTMSteeringProhibitShortTime $BS_SE_BTM_STEERINGPROHIBITTIME
	__lbd_cfg_add_str	MaxBTMUnfriendly $BS_SE_MAX_BTM_UNFRIENDLY
	__lbd_cfg_add_str	MaxBTMActiveUnfriendly $BS_SE_MAX_BTM_ACTIVE_UNFRIENDLY
	__lbd_cfg_add_str	AgeLimit $BS_ADV_AGE_LIMIT
	__lbd_cfg_add_str	MinRSSIBestEffort $BS_SE_MINRSSI_BEST_EFFORT
	__lbd_cfg_nl_append '[STEERALG]'
	__lbd_cfg_add_str	InactRSSIXingThreshold_W2 $BS_IS_RSSI_STEERPOINT_DG
	__lbd_cfg_add_str	InactRSSIXingThreshold_W5 $BS_IS_RSSI_STEERING_POINT_UG
	__lbd_cfg_add_str	HighTxRateXingThreshold $BS_AS_TXRATEXING_THRESHOLD_UG
	__lbd_cfg_add_str	HighRateRSSIXingThreshold $BS_AS_RATERSSIXING_THRESHOLD_UG
	__lbd_cfg_add_str	LowTxRateXingThreshold $BS_AS_LOWTXRATEXING_THRESHLD_DG
	__lbd_cfg_add_str	LowRateRSSIXingThreshold $BS_AS_RATERSSIXING_TH_DG
	__lbd_cfg_add_str	MinTxRateIncreaseThreshold $BS_SALG_MINTXRATEINC_THRESHOLD
	__lbd_cfg_add_str	AgeLimit $BS_ADV_AGE_LIMIT
	__lbd_cfg_add_str	PHYBasedPrioritization $BS_PHY_BASED_PRIORITIZATION
	__lbd_cfg_add_str	RSSISafetyThreshold $BS_OL_OFFLOADING_MIN_RSSI
}

check_bands() {
	local iface
	BANDS=$(/sbin/iwconfig 2> /dev/null | grep Frequency | cut -d':' -f 3 | cut -d'.' -f 1)
	for band in $BANDS
	do
		if [ "${band}" = "2" ]; then
			band_24g=1
		elif [ "${band}" = "5" ]; then
			band_5g=1
		fi
	done

	if [ "${band_24g}" = "1" ] && [ "${band_5g}" = "1" ]; then
		dual_bands=2
##		IF_NAME=ath0,ath1
	elif [ "${band_24g}" = "1" ] || [ "${band_5g}" = "1" ]; then
##		IF_NAME=ath0
		dual_bands=1
	fi

	if [ "${AP_STARTMODE}" = "multivlan" ] && [ "${dual_bands}" = "2" ]; then
		if [ "${AP_SSID}" = "${BS_MATCHING_SSID}" ]; then
			iface=wifi${AP_RADIO_ID}:ath0
			IF_NAME="${IF_NAME}${IF_NAME:+","}${iface}"
		fi
		# ARRIS MOD - from AP_SSID_2 to AP_SSID_9
		if [ "${AP_SSID_9}" = "${BS_MATCHING_SSID}" ]; then
			# ARRIS MOD - from ath1 to ath8 and AP_RADIO_ID_2 to AP_RADIO_ID_9
			iface=wifi${AP_RADIO_ID_9}:ath8
			IF_NAME="${IF_NAME}${IF_NAME:+","}${iface}"
		fi
	elif [ "${AP_STARTMODE}" = "dual" ] && [ "${dual_bands}" = "1" ]; then
		if [ "${AP_SSID}" = "${BS_MATCHING_SSID}" ]; then
			iface=wifi${AP_RADIO_ID}:ath0
			IF_NAME="${IF_NAME}${IF_NAME:+","}${iface}"
		fi
	fi

	if [ "${AP_STARTMODE}" = "standard" ] && [ "${dual_bands}" = "2" ]; then
		if [ "${AP_SSID}" = "${BS_MATCHING_SSID}" ]; then
			iface=wifi${AP_RADIO_ID}:ath0
			IF_NAME="${IF_NAME}${IF_NAME:+","}${iface}"
		fi
		# ARRIS MOD - from AP_SSID_2 to AP_SSID_9
		if [ "${AP_SSID_9}" = "${BS_MATCHING_SSID}" ]; then
			# ARRIS MOD - from ath1 to ath8 and AP_RADIO_ID_2 to AP_RADIO_ID_9
			iface=wifi${AP_RADIO_ID_9}:ath8
			IF_NAME="${IF_NAME}${IF_NAME:+","}${iface}"
		fi
	elif [ "${AP_STARTMODE}" = "rootap" ] || [ "${AP_STARTMODE}" = "standard" ]; then
		if [ "${AP_SSID}" = "${BS_MATCHING_SSID}" ]; then
			iface=wifi${AP_RADIO_ID}:ath0
			IF_NAME="${IF_NAME}${IF_NAME:+","}${iface}"
		fi
	fi

##	echo BS_MATCHING_SSID=$BS_MATCHING_SSID IF_NAME=$IF_NAME dual_bands=$dual_bands
##  if [ [ "${BS_MATCHING_SSID}" = "" ] && [ "$IF_NAME" = "" ]; then
##      if [ "${dual_bands}" = "2" ]; then
##			IF_NAME=ath0,ath1
##		elif [ "${dual_bands}" = "1" ]; then
##			IF_NAME=ath0
##		fi
##	fi
}

start() {
##	__stop
	if [ "${BS_ENABLE}" = "1" ]; then
		# ARRIS ADD start - bail if running already (don't want 2 instances)
		if [ -f "$LBD_RUN_FILE" ]; then
			echo "lbd already running - exiting! (use 'lbd-script restart' to force a restart)"
			return
		fi
		# ARRIS ADD end
		echo lbd "starting daemon"
		check_bands
		echo band freq: $band_24g , $BANDS
		if [ "${band_24g}" = "1" ] || [ "${band_5g}" = "1" ]; then
			echo lbd "daemon started"
			# Create configuration file and start lbd
			__lbd_create_config
			##${SVCDBG}service_start ${SERVICE_PATH} -d -C "$LBD_CONFIG_FILE"
			# ARRIS MOD start - check if should run with -d debug flag
			if [ "${BS_ENABLE_DEBUG}" = "1" ]; then
				${SERVICE_PATH} -d -C "$LBD_CONFIG_FILE" &
			else
				# background & not needed because lbd will fork into a daemon without -d
				${SERVICE_PATH} -C "$LBD_CONFIG_FILE"
			fi
			# ARRIS MOD end
			touch $LBD_RUN_FILE
		fi
	# ARRIS ADD start
	else
		echo "Band steering is currently disabled (BS_ENABLE=0) - nothing to do"
	# ARRIS ADD end
	fi
	}

__stop() {
	##${SVCDBG}service_stop ${SERVICE_PATH}

	# Workaround, sometimes service_stop does not kill lbd
	#start-stop-daemon -K -x ${SERVICE_PATH} -s SIGKILL > /dev/null
	rm -f $LBD_RUN_FILE
	killall -TERM lbd
	echo lbd "daemon stopped"
}

stop() {
	__stop
}

restart() {
	#[ -f "$LBD_RUN_FILE" ] || return # ARRIS DELETE - restart should start if it was stopped at first
	__stop # ARRIS ADD - try to stop anyway
	start
}

args=$1
#if [ "${args}" = "start" ]; then  # ARRIS DELETE - always load env variables so that restart works
	cfg -e > /tmp/vars.$$
	. /tmp/vars.$$
	rm /tmp/vars.$$

    # ARRIS MOD - START - remove the "cfg -a" - this is unnecessarily time consuming
    # ARRIS - changed from BS_RSSI_STEERING_POINT_UG to BS_IS_RSSI_STEERING_POINT_UG
    BS_ENABLE=${BS_ENABLE:="0"}
    BS_MATCHING_SSID=${BS_MATCHING_SSID:="band_steering"}
    BS_PHY_BASED_PRIORITIZATION=${BS_PHY_BASED_PRIORITIZATION:="0"}
    BS_ADV_AGE_LIMIT=${BS_ADV_AGE_LIMIT:="5"}

    BS_STADB_INCLUDEOUTOFNETWORK=${BS_STADB_INCLUDEOUTOFNETWORK:="1"}
    BS_STADBADV_AGINGSIZETHRESHOLD=${BS_STADBADV_AGINGSIZETHRESHOLD:="100"}
    BS_STADBADV_AGINGFREQUENCY=${BS_STADBADV_AGINGFREQUENCY:="60"}
    BS_STADBADV_OUTOFNETWORKMAXAGE=${BS_STADBADV_OUTOFNETWORKMAXAGE:="300"}
    BS_STADBADV_INNETWORKMAXAGE=${BS_STADBADV_INNETWORKMAXAGE:="2592000"}

    BS_STAMON_RSSIMEASURESAMPLES_W2=${BS_STAMON_RSSIMEASURESAMPLES_W2:="5"}
    BS_STAMON_RSSIMEASURESAMPLES_W5=${BS_STAMON_RSSIMEASURESAMPLES_W5:="5"}
    BS_STAMON_RSSIDIFF_ESTW5FROMW2=${BS_STAMON_RSSIDIFF_ESTW5FROMW2:="-20"}
    BS_STAMON_RSSIDIFF_ESTW2FROMW5=${BS_STAMON_RSSIDIFF_ESTW2FROMW5:="10"}
    BS_BANDMON_PROBECOUNTTHRESHOLD=${BS_BANDMON_PROBECOUNTTHRESHOLD:="1"}

    BS_SE_STEERINGPROHIBITTIME=${BS_SE_STEERINGPROHIBITTIME:="300"}
    BS_SE_BTM_STEERINGPROHIBITTIME=${BS_SE_BTM_STEERINGPROHIBITTIME:="30"}
    BS_SE_TSTEERING=${BS_SE_TSTEERING:="15"}
    BS_SE_INITAUTHREJCOALESCETIME=${BS_SE_INITAUTHREJCOALESCETIME:="2"}
    BS_SE_AUTHREJMAX=${BS_SE_AUTHREJMAX:="3"}
    BS_SE_STEERINGUNFRIENDLYTIME=${BS_SE_STEERINGUNFRIENDLYTIME:="600"}
    BS_SE_MAX_STEER_UNFRIENDLY=${BS_SE_MAX_STEER_UNFRIENDLY:="604800"}
    BS_SE_TARGETLOWRSSITHRESHOLD_W2=${BS_SE_TARGETLOWRSSITHRESHOLD_W2:="5"}
    BS_SE_TARGETLOWRSSITHRESHOLD_W5=${BS_SE_TARGETLOWRSSITHRESHOLD_W5:="15"}
    BS_SE_BLACKLISTTIME=${BS_SE_BLACKLISTTIME:="86400"}
    BS_SE_BTM_RESPONSE_TIME=${BS_SE_BTM_RESPONSE_TIME:="10"}
    BS_SE_BTM_ASSOC_TIME=${BS_SE_BTM_ASSOC_TIME:="6"}
    BS_SE_BTM_BLACKLIST=${BS_SE_BTM_BLACKLIST:="1"}
    BS_SE_BTM_UNFRIENDLY_TIME=${BS_SE_BTM_UNFRIENDLY_TIME:="600"}
    BS_SE_MAX_BTM_UNFRIENDLY=${BS_SE_MAX_BTM_UNFRIENDLY:="86400"}
    BS_SE_MAX_BTM_ACTIVE_UNFRIENDLY=${BS_SE_MAX_BTM_ACTIVE_UNFRIENDLY:="604800"}
    BS_SE_MINRSSI_BEST_EFFORT=${BS_SE_MINRSSI_BEST_EFFORT:="12"}
    BS_SE_LOW_RSSIXING_THRESHOLD=${BS_SE_LOW_RSSIXING_THRESHOLD:="10"}

    BS_IS_NORM_INACT_TIMEOUT=${BS_IS_NORM_INACT_TIMEOUT:="10"}
    BS_IS_OVERLOAD_INACT_TIMEOUT=${BS_IS_OVERLOAD_INACT_TIMEOUT:="10"}
    BS_IS_INACTCHECKINTERVAL=${BS_IS_INACTCHECKINTERVAL:="1"}
    BS_IS_RSSI_STEERPOINT_DG=${BS_IS_RSSI_STEERPOINT_DG:="5"}
    BS_IS_RSSI_STEERING_POINT_UG=${BS_IS_RSSI_STEERING_POINT_UG:="30"}

    BS_AS_TXRATEXING_THRESHOLD_UG=${BS_AS_TXRATEXING_THRESHOLD_UG:="50000"}
    BS_AS_RATERSSIXING_THRESHOLD_UG=${BS_AS_RATERSSIXING_THRESHOLD_UG:="40"}
    BS_AS_RATERSSIXING_THRESHOLD_DG=${BS_AS_RATERSSIXING_THRESHOLD_DG:="0"}

    BS_OL_MU_AVG_PERIOD=${BS_OL_MU_AVG_PERIOD:="60"}
    BS_OL_MU_OVERLOAD_THRESHOLD_W2=${BS_OL_MU_OVERLOAD_THRESHOLD_W2:="70"}
    BS_OL_MUS_OVRLD_THRESHOLD_W5=${BS_OL_MUS_OVRLD_THRESHOLD_W5:="70"}

    BS_OL_MU_SAFETY_THRESHOLD_W2=${BS_OL_MU_SAFETY_THRESHOLD_W2:="50"}
    BS_OL_MU_SAFETY_THRESHOLD_W5=${BS_OL_MU_SAFETY_THRESHOLD_W5:="60"}
    BS_OL_OFFLOADING_MIN_RSSI=${BS_OL_OFFLOADING_MIN_RSSI:="20"}

    BS_BANDMON_MUCHECK_INTERVAL_W2=${BS_BANDMON_MUCHECK_INTERVAL_W2:="10"}

    BS_EST_RSSIDIFF_ESTW5FROMW2=${BS_EST_RSSIDIFF_ESTW5FROMW2:="-15"}
    BS_EST_RSSIDIFF_ESTW2FROMW5=${BS_EST_RSSIDIFF_ESTW2FROMW5:="5"}
    BS_EST_PROBE_COUNT_THRESHOLD=${BS_EST_PROBE_COUNT_THRESHOLD:="3"}
    BS_EST_STATS_SAMPLE_INTERVAL=${BS_EST_STATS_SAMPLE_INTERVAL:="1"}
    BS_EST_11KPROHIBIT_TIME=${BS_EST_11KPROHIBIT_TIME:="30"}
    BS_EST_PHYRATESCALLING_AIRTIME=${BS_EST_PHYRATESCALLING_AIRTIME:="50%"}
    BS_EST_ENABLE_CONTINUOUS_TP=${BS_EST_ENABLE_CONTINUOUS_TP:="0"}
    BS_EST_BCNRPT_ACTIVE_DURATION=${BS_EST_BCNRPT_ACTIVE_DURATION:="50"}
    BS_EST_BCNRPT_PASSIVE_DURATION=${BS_EST_BCNRPT_PASSIVE_DURATION:="200"}
    BS_SALG_MINTXRATEINC_THRESHOLD=${BS_SALG_MINTXRATEINC_THRESHOLD:="53"}

    BS_AS_LOWTXRATEXING_THRESHLD_DG=${BS_AS_LOWTXRATEXING_THRESHLD_DG:="6000"}
    BS_AS_RATERSSIXING_TH_DG=${BS_AS_RATERSSIXING_TH_DG:="0"}
    AP_SSID="${AP_SSID:=Atheros_XSpan_2G}"
    AP_STARTMODE=${AP_STARTMODE:="standard"}

	# ARRIS ADD - this cfg controls whether lbd is run with the -d flag
	BS_ENABLE_DEBUG=${BS_ENABLE_DEBUG:="0"}

    # ARRIS MOD - END
	# ARRIS REMOVE - START - Already did this above
	#cfg -e > /tmp/vars.$$
	#. /tmp/vars.$$
	#rm /tmp/vars.$$
	# ARRIS REMOVE - END

if [ "${args}" = "start" ]; then # ARRIS ADD - (moved down from above)
	start
elif [ "${args}" = "stop" ]; then
	stop
elif [ "${args}" = "restart" ]; then
	restart
fi
