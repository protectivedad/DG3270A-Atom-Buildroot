--- a/package/iproute2/0001-utils.h-provide-fallback-CLOCK_TAI-definition.patch
+++ /dev/null
@@ -1,32 +0,0 @@
-From 950bf78adc9a3290ed383eaeef01dee6543cfb97 Mon Sep 17 00:00:00 2001
-From: Peter Korsgaard <peter@korsgaard.com>
-Date: Sat, 27 Oct 2018 17:25:31 +0200
-Subject: [PATCH] utils.h: provide fallback CLOCK_TAI definition
-
-q_{etf,taprio}.c uses CLOCK_TAI, which isn't exposed by glibc < 2.21 or
-uClibc, breaking the build. Provide a fallback definition like it is done
-for IPPROTO_MPLS and others.
-
-Signed-off-by: Peter Korsgaard <peter@korsgaard.com>
----
- include/utils.h | 4 ++++
- 1 file changed, 4 insertions(+)
-
-diff --git a/include/utils.h b/include/utils.h
-index 258d630e..685d2c1d 100644
---- a/include/utils.h
-+++ b/include/utils.h
-@@ -126,6 +126,10 @@ struct ipx_addr {
- #define IPPROTO_MPLS	137
- #endif
- 
-+#ifndef CLOCK_TAI
-+# define CLOCK_TAI 11
-+#endif
-+
- __u32 get_addr32(const char *name);
- int get_addr_1(inet_prefix *dst, const char *arg, int family);
- int get_prefix_1(inet_prefix *dst, char *arg, int family);
--- 
-2.11.0
-
--- a/package/iproute2/0002-ss-fix-compilation-under-glibc-2.18.patch
+++ /dev/null
@@ -1,39 +0,0 @@
-From 9700927a008a803ac119bdf816bdc1baa69d705c Mon Sep 17 00:00:00 2001
-From: Thomas De Schampheleire <thomas.de_schampheleire@nokia.com>
-Date: Wed, 20 Feb 2019 15:41:51 +0100
-Subject: [PATCH] ss: fix compilation under glibc < 2.18
-
-Commit c759116a0b2b6da8df9687b0a40ac69050132c77 introduced support for
-AF_VSOCK. This define is only provided since glibc version 2.18, so
-compilation fails when using older toolchains.
-
-Provide the necessary definitions if needed.
-
-Signed-off-by: Thomas De Schampheleire <thomas.de_schampheleire@nokia.com>
-Signed-off-by: Stephen Hemminger <stephen@networkplumber.org>
----
- misc/ss.c | 8 ++++++++
- 1 file changed, 8 insertions(+)
-
-diff --git a/misc/ss.c b/misc/ss.c
-index 9e821faf..766fdc5f 100644
---- a/misc/ss.c
-+++ b/misc/ss.c
-@@ -51,6 +51,14 @@
- #include <linux/tipc_netlink.h>
- #include <linux/tipc_sockets_diag.h>
- 
-+/* AF_VSOCK/PF_VSOCK is only provided since glibc 2.18 */
-+#ifndef PF_VSOCK
-+#define PF_VSOCK 40
-+#endif
-+#ifndef AF_VSOCK
-+#define AF_VSOCK PF_VSOCK
-+#endif
-+
- #define MAGIC_SEQ 123456
- #define BUF_CHUNK (1024 * 1024)
- #define LEN_ALIGN(x) (((x) + 1) & ~1)
--- 
-2.19.2
-
--- a/package/iproute2/Config.in
+++ b/package/iproute2/Config.in
@@ -1,13 +1,8 @@
 config BR2_PACKAGE_IPROUTE2
 	bool "iproute2"
 	depends on BR2_USE_MMU # fork()
-	depends on BR2_TOOLCHAIN_HEADERS_AT_LEAST_3_4 # __kernel_{u,}long_t
 	help
-	  Kernel routing and traffic control utilities. Provides things
+	  Kernel routing and traffic control utilities.  Provides things
 	  like ip and tc.
 
 	  http://www.linuxfoundation.org/collaborate/workgroups/networking/iproute2
-
-comment "iproute2 needs a toolchain w/ headers >= 3.4"
-	depends on BR2_USE_MMU
-	depends on !BR2_TOOLCHAIN_HEADERS_AT_LEAST_3_4
--- /dev/null
+++ b/package/iproute2/iproute2-01-optional-ipv6.patch
@@ -0,0 +1,89 @@
+[PATCH] fix build on uClibc without IPv6 support
+
+Disable IPv6 support code when building with uClibc configured without IPv6
+support.
+
+[Gustavo: update for iproute2 3.10.0]
+Signed-off-by: Peter Korsgaard <jacmet@sunsite.dk>
+Signed-off-by: Gustavo Zacarias <gustavo@zacarias.com.ar>
+
+diff -Nura iproute2-3.10.0.orig/ip/ip6tunnel.c iproute2-3.10.0/ip/ip6tunnel.c
+--- iproute2-3.10.0.orig/ip/ip6tunnel.c	2013-08-14 09:17:56.538089916 -0300
++++ iproute2-3.10.0/ip/ip6tunnel.c	2013-08-14 09:18:02.952298534 -0300
+@@ -20,6 +20,10 @@
+  *	Masahide NAKAMURA @USAGI
+  */
+
++#include <features.h>
++#if defined(__UCLIBC__) && !defined (__UCLIBC_HAS_IPV6__)
++#else
++
+ #include <stdio.h>
+ #include <string.h>
+ #include <stdlib.h>
+@@ -425,3 +429,5 @@
+ 	fprintf(stderr, "Command \"%s\" is unknown, try \"ip -f inet6 tunnel help\".\n", *argv);
+ 	exit(-1);
+ }
++
++#endif /* no ipv6 */
+diff -Nura iproute2-3.10.0.orig/ip/ipprefix.c iproute2-3.10.0/ip/ipprefix.c
+--- iproute2-3.10.0.orig/ip/ipprefix.c	2013-08-14 09:17:56.539089949 -0300
++++ iproute2-3.10.0/ip/ipprefix.c	2013-08-14 09:19:29.065099291 -0300
+@@ -23,11 +23,18 @@
+  *	Masahide NAKAMURA @USAGI
+  */
+
++#include <features.h>
++#if defined(__UCLIBC__) && !defined (__UCLIBC_HAS_IPV6__)
++#define NO_IPV6
++#endif
++
+ #include <stdio.h>
+ #include <stdlib.h>
+ #include <string.h>
+ #include <sys/socket.h>
++#ifndef NO_IPV6
+ #include <netinet/icmp6.h>
++#endif
+
+ #include "utils.h"
+ #include "ip_common.h"
+@@ -65,10 +72,12 @@
+ 		fprintf(stderr, "incorrect protocol family: %d\n", prefix->prefix_family);
+ 		return 0;
+ 	}
++#ifdef ND_OPT_PREFIX_INFORMATION
+ 	if (prefix->prefix_type != ND_OPT_PREFIX_INFORMATION) {
+ 		fprintf(stderr, "wrong ND type %d\n", prefix->prefix_type);
+ 		return 0;
+ 	}
++#endif
+
+ 	parse_rtattr(tb, RTA_MAX, RTM_RTA(prefix), len);
+
+diff -Nura iproute2-3.10.0.orig/ip/iptunnel.c iproute2-3.10.0/ip/iptunnel.c
+--- iproute2-3.10.0.orig/ip/iptunnel.c	2013-08-14 09:17:56.538089916 -0300
++++ iproute2-3.10.0/ip/iptunnel.c	2013-08-14 09:18:02.953298566 -0300
+@@ -9,6 +9,10 @@
+  * Authors:	Alexey Kuznetsov, <kuznet@ms2.inr.ac.ru>
+  *
+  */
++#include <features.h>
++#if defined(__UCLIBC__) && !defined (__UCLIBC_HAS_IPV6__)
++#define NO_IPV6
++#endif
+
+ #include <stdio.h>
+ #include <stdlib.h>
+@@ -634,8 +638,10 @@
+ 	 * protocol-independent because of unarranged structure between
+ 	 * IPv4 and IPv6.
+ 	 */
++#ifndef NO_IPV6
+ 	case AF_INET6:
+ 		return do_ip6tunnel(argc, argv);
++#endif
+ 	default:
+ 		fprintf(stderr, "Unsupported protocol family: %d\n", preferred_family);
+ 		exit(-1);
--- /dev/null
+++ b/package/iproute2/iproute2-02-vxlan-optional-ipv6.patch
@@ -0,0 +1,83 @@
+Disable IPv6 support code in vxlan when building with uClibc configured without
+IPv6 support.
+
+Signed-off-by: Gustavo Zacarias <gustavo@zacarias.com.ar>
+
+diff -Nura iproute2-3.14.0/ip/iplink_vxlan.c iproute2-3.14.0-noipv6/ip/iplink_vxlan.c
+--- iproute2-3.14.0/ip/iplink_vxlan.c	2014-04-11 21:48:41.000000000 -0300
++++ iproute2-3.14.0-noipv6/ip/iplink_vxlan.c	2014-04-14 08:36:22.638235721 -0300
+@@ -9,6 +9,11 @@
+  * Authors:     Stephen Hemminger <shemminger@vyatta.com
+  */
+ 
++#include <features.h>
++#if defined(__UCLIBC__) && !defined (__UCLIBC_HAS_IPV6__)
++#define NO_IPV6
++#endif
++
+ #include <stdio.h>
+ #include <stdlib.h>
+ #include <string.h>
+@@ -188,12 +193,14 @@
+ 		return -1;
+ 	}
+ 
++#ifndef NO_IPV6
+ 	if ((gaddr && daddr) ||
+ 		(memcmp(&gaddr6, &in6addr_any, sizeof(gaddr6)) &&
+ 		 memcmp(&daddr6, &in6addr_any, sizeof(daddr6)))) {
+ 		fprintf(stderr, "vxlan: both group and remote cannot be specified\n");
+ 		return -1;
+ 	}
++#endif
+ 
+ 	if (!dst_port_set) {
+ 		fprintf(stderr, "vxlan: destination port not specified\n"
+@@ -208,15 +215,19 @@
+ 		addattr_l(n, 1024, IFLA_VXLAN_GROUP, &gaddr, 4);
+ 	else if (daddr)
+ 		addattr_l(n, 1024, IFLA_VXLAN_GROUP, &daddr, 4);
++#ifndef NO_IPV6
+ 	if (memcmp(&gaddr6, &in6addr_any, sizeof(gaddr6)) != 0)
+ 		addattr_l(n, 1024, IFLA_VXLAN_GROUP6, &gaddr6, sizeof(struct in6_addr));
+ 	else if (memcmp(&daddr6, &in6addr_any, sizeof(daddr6)) != 0)
+ 		addattr_l(n, 1024, IFLA_VXLAN_GROUP6, &daddr6, sizeof(struct in6_addr));
++#endif
+ 
+ 	if (saddr)
+ 		addattr_l(n, 1024, IFLA_VXLAN_LOCAL, &saddr, 4);
++#ifndef NO_IPV6
+ 	else if (memcmp(&saddr6, &in6addr_any, sizeof(saddr6)) != 0)
+ 		addattr_l(n, 1024, IFLA_VXLAN_LOCAL6, &saddr6, sizeof(struct in6_addr));
++#endif
+ 
+ 	if (link)
+ 		addattr32(n, 1024, IFLA_VXLAN_LINK, link);
+@@ -275,6 +286,7 @@
+ 	} else if (tb[IFLA_VXLAN_GROUP6]) {
+ 		struct in6_addr addr;
+ 		memcpy(&addr, RTA_DATA(tb[IFLA_VXLAN_GROUP6]), sizeof(struct in6_addr));
++#ifndef NO_IPV6
+ 		if (memcmp(&addr, &in6addr_any, sizeof(addr)) != 0) {
+ 			if (IN6_IS_ADDR_MULTICAST(&addr))
+ 				fprintf(f, "group %s ",
+@@ -283,6 +295,7 @@
+ 				fprintf(f, "remote %s ",
+ 					format_host(AF_INET6, sizeof(struct in6_addr), &addr, s1, sizeof(s1)));
+ 		}
++#endif
+ 	}
+ 
+ 	if (tb[IFLA_VXLAN_LOCAL]) {
+@@ -293,9 +306,11 @@
+ 	} else if (tb[IFLA_VXLAN_LOCAL6]) {
+ 		struct in6_addr addr;
+ 		memcpy(&addr, RTA_DATA(tb[IFLA_VXLAN_LOCAL6]), sizeof(struct in6_addr));
++#ifndef NO_IPV6
+ 		if (memcmp(&addr, &in6addr_any, sizeof(addr)) != 0)
+ 			fprintf(f, "local %s ",
+ 				format_host(AF_INET6, sizeof(struct in6_addr), &addr, s1, sizeof(s1)));
++#endif
+ 	}
+ 
+ 	if (tb[IFLA_VXLAN_LINK] &&
--- a/package/iproute2/iproute2.hash
+++ b/package/iproute2/iproute2.hash
@@ -1,3 +1,3 @@
 # From https://kernel.org/pub/linux/utils/net/iproute2/sha256sums.asc
-sha256	d9ec5ca1f47d8a85416fa26e7dc1cbf5d067640eb60e90bdc1c7e5bdc6a29984  iproute2-4.19.0.tar.xz
-sha256	e6d6a009505e345fe949e1310334fcb0747f28dae2856759de102ab66b722cb4	COPYING
+sha256	09e406636e7598e46d5d4f7b928bf5db57049d65dbeb9a496005957ee16f6000	iproute2-3.17.0.tar.xz
+sha256	e2f9f8c36e166f2ba6c0e1e7a9ad84cdf7c1615b93df49dac44563d7b57fd7b0	iproute2-3.19.0.tar.xz
--- a/package/iproute2/iproute2.mk
+++ b/package/iproute2/iproute2.mk
@@ -4,46 +4,72 @@
 #
 ################################################################################
 
-IPROUTE2_VERSION = 4.19.0
+IPROUTE2_VERSION = 3.19.0
 IPROUTE2_SOURCE = iproute2-$(IPROUTE2_VERSION).tar.xz
 IPROUTE2_SITE = $(BR2_KERNEL_MIRROR)/linux/utils/net/iproute2
-IPROUTE2_DEPENDENCIES = host-bison host-flex host-pkgconf \
-	$(if $(BR2_PACKAGE_LIBMNL),libmnl)
-IPROUTE2_LICENSE = GPL-2.0+
+IPROUTE2_DEPENDENCIES = host-bison host-flex
+IPROUTE2_LICENSE = GPLv2
 IPROUTE2_LICENSE_FILES = COPYING
 
-ifeq ($(BR2_PACKAGE_ELFUTILS),y)
-IPROUTE2_DEPENDENCIES += elfutils
+# If both iproute2 and busybox are selected, make certain we win
+# the fight over who gets to have their utils actually installed.
+ifeq ($(BR2_PACKAGE_BUSYBOX),y)
+IPROUTE2_DEPENDENCIES += busybox
 endif
 
-ifeq ($(BR2_PACKAGE_IPTABLES)x$(BR2_STATIC_LIBS),yx)
+# If we've got iptables enable xtables support for tc
+ifeq ($(BR2_PACKAGE_IPTABLES),y)
 IPROUTE2_DEPENDENCIES += iptables
+define IPROUTE2_WITH_IPTABLES
+	# Makefile is busted so it never passes IPT_LIB_DIR properly
+	$(SED) "s/-DIPT/-DXT/" $(IPROUTE2_DIR)/tc/Makefile
+	echo "TC_CONFIG_XT:=y" >>$(IPROUTE2_DIR)/Config
+endef
 else
-define IPROUTE2_DISABLE_IPTABLES
-	# m_xt.so is built unconditionally
-	echo "TC_CONFIG_XT:=n" >>$(@D)/config.mk
+define IPROUTE2_WITH_IPTABLES
+	# em_ipset needs xtables, but configure misdetects it
+	echo "TC_CONFIG_IPSET:=n" >>$(IPROUTE2_DIR)/Config
 endef
 endif
 
-ifeq ($(BR2_PACKAGE_BERKELEYDB_COMPAT185),y)
+# arpd needs BerkeleyDB and links against pthread
+ifeq ($(BR2_PACKAGE_BERKELEYDB_COMPAT185)$(BR2_TOOLCHAIN_HAS_THREADS),yy)
 IPROUTE2_DEPENDENCIES += berkeleydb
+else
+define IPROUTE2_DISABLE_ARPD
+	$(SED) "/^TARGETS=/s: arpd : :" $(IPROUTE2_DIR)/misc/Makefile
+endef
+endif
+
+# ifcfg needs bash
+ifeq ($(BR2_PACKAGE_BASH),)
+define IPROUTE2_REMOVE_IFCFG
+	rm -f $(TARGET_DIR)/sbin/ifcfg
+endef
 endif
 
 define IPROUTE2_CONFIGURE_CMDS
+	$(SED) 's/gcc/$$CC $$CFLAGS/g' $(@D)/configure
 	cd $(@D) && $(TARGET_CONFIGURE_OPTS) ./configure
-	$(IPROUTE2_DISABLE_IPTABLES)
+	$(SED) 's/-Werror//' $(IPROUTE2_DIR)/Makefile
+	echo "IPT_LIB_DIR:=/usr/lib/xtables" >>$(IPROUTE2_DIR)/Config
+	$(IPROUTE2_DISABLE_ARPD)
+	$(IPROUTE2_WITH_IPTABLES)
 endef
 
 define IPROUTE2_BUILD_CMDS
-	$(TARGET_MAKE_ENV) LDFLAGS="$(TARGET_LDFLAGS)" \
-		CFLAGS="$(TARGET_CFLAGS) -DXT_LIB_DIR=\\\"/usr/lib/xtables\\\"" \
-		CBUILD_CFLAGS="$(HOST_CFLAGS)" $(MAKE) V=1 LIBDB_LIBS=-lpthread \
+	$(SED) 's/$$(CCOPTS)//' $(@D)/netem/Makefile
+	$(TARGET_MAKE_ENV) $(MAKE) \
 		DBM_INCLUDE="$(STAGING_DIR)/usr/include" \
-		SHARED_LIBS="$(if $(BR2_STATIC_LIBS),n,y)" -C $(@D)
+		CCOPTS="$(TARGET_CFLAGS) -D_GNU_SOURCE" -C $(@D)
 endef
 
 define IPROUTE2_INSTALL_TARGET_CMDS
-	$(TARGET_MAKE_ENV) DESTDIR="$(TARGET_DIR)" $(MAKE) -C $(@D) install
+	$(TARGET_MAKE_ENV) $(MAKE) -C $(@D) DESTDIR="$(TARGET_DIR)" \
+		SBINDIR=/sbin \
+		DOCDIR=/usr/share/doc/iproute2-$(IPROUTE2_VERSION) \
+		MANDIR=/usr/share/man install
+	$(IPROUTE2_REMOVE_IFCFG)
 endef
 
 $(eval $(generic-package))
